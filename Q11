import heapq

class Graph:
    def __init__(self, adjacency_list):
        self.adjacency_list = adjacency_list

    def a_star(self, start, goal):
        open_set = []
        heapq.heappush(open_set, (0, start))  # Priority queue with (f_score, node)
        came_from = {}  # Store the previous node in the optimal path
        g_score = {node: float('inf') for node in self.adjacency_list}  # Cost from start to node
        g_score[start] = 0
        f_score = {node: float('inf') for node in self.adjacency_list}  # Estimated total cost from start to goal
        f_score[start] = self.heuristic(start, goal)

        while open_set:
            current_f, current = heapq.heappop(open_set)
            if current == goal:
                return self.reconstruct_path(came_from, current)

            for neighbor in self.adjacency_list[current]:
                tentative_g = g_score[current] + self.distance(current, neighbor)
                if tentative_g < g_score[neighbor]:
                    came_from[neighbor] = current
                    g_score[neighbor] = tentative_g
                    f_score[neighbor] = tentative_g + self.heuristic(neighbor, goal)
                    heapq.heappush(open_set, (f_score[neighbor], neighbor))

        return None  # No path found

    def heuristic(self, node, goal):
        # Heuristic function (Euclidean distance for example)
        x1, y1 = node
        x2, y2 = goal
        return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5

    def distance(self, node1, node2):
        # Distance function (Euclidean distance for example)
        x1, y1 = node1
        x2, y2 = node2
        return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5

    def reconstruct_path(self, came_from, current):
        path = [current]
        while current in came_from:
            current = came_from[current]
            path.append(current)
        return path[::-1]

if __name__ == "__main__":
    # Example graph represented as an adjacency list
    adjacency_list = {
        (0, 0): [(1, 0), (0, 1)],
        (1, 0): [(0, 0), (2, 0), (1, 1)],
        (0, 1): [(0, 0), (0, 2), (1, 1)],
        (1, 1): [(0, 1), (1, 0), (2, 1)],
        (2, 0): [(1, 0), (2, 1)],
        (0, 2): [(0, 1), (1, 2)],
        (1, 2): [(0, 2), (1, 1), (2, 2)],
        (2, 1): [(1, 1), (2, 0), (2, 2)],
        (2, 2): [(1, 2), (2, 1)]
    }

    graph = Graph(adjacency_list)
    start = (0, 0)
    goal = (2, 2)

    path = graph.a_star(start, goal)
    if path:
        print("Shortest path from", start, "to", goal, ":", path)
    else:
        print("No path found from", start, "to", goal)'''

