import heapq

def manhattan(board):
    return sum(abs((val-1) % 3 - i % 3) + abs((val-1) // 3 - i // 3) for i, val in enumerate(board) if val)

def neighbors(board):
    i = board.index(0)
    x, y = divmod(i, 3)
    for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_board = board[:]
            new_board[i], new_board[nx*3 + ny] = new_board[nx*3 + ny], new_board[i]
            yield new_board

def solve_puzzle(start_board):
    pq = [(manhattan(start_board), 0, start_board, [])]
    visited = set()
    visited.add(tuple(start_board))

    while pq:
        _, moves, board, path = heapq.heappop(pq)
        if board == [1, 2, 3, 4, 5, 6, 7, 8, 0]:
            return path + [board]
        for neighbor in neighbors(board):
            if tuple(neighbor) not in visited:
                visited.add(tuple(neighbor))
                heapq.heappush(pq, (moves + 1 + manhattan(neighbor), moves + 1, neighbor, path + [board]))
    return None

if __name__ == "__main__":
    start_board = [1, 2, 3, 4, 5, 6, 0, 7, 8]
    solution = solve_puzzle(start_board)
    if solution:
        for step in solution:
            for row in [step[:3], step[3:6], step[6:]]:
                print(row)
            print()
    else:
        print("No solution found.")
