from collections import deque

def is_valid_state(jug1, jug2, visited):
    return (jug1, jug2) not in visited

def water_jug_solver(jug1_capacity, jug2_capacity, target):
    # Initialize the queue and the visited set
    queue = deque([(0, 0)])
    visited = set((0, 0))
    path = { (0, 0): [] }
    
    while queue:
        jug1, jug2 = queue.popleft()

        # If we reach the target, return the path
        if jug1 == target or jug2 == target:
            return path[(jug1, jug2)] + [(jug1, jug2)]
        
        # List of possible next states
        next_states = [
            (jug1_capacity, jug2),  # Fill jug1
            (jug1, jug2_capacity),  # Fill jug2
            (0, jug2),              # Empty jug1
            (jug1, 0),              # Empty jug2
            (jug1 - min(jug1, jug2_capacity - jug2), jug2 + min(jug1, jug2_capacity - jug2)),  # Pour jug1 -> jug2
            (jug1 + min(jug2, jug1_capacity - jug1), jug2 - min(jug2, jug1_capacity - jug1))   # Pour jug2 -> jug1
        ]

        for state in next_states:
            if is_valid_state(state[0], state[1], visited):
                queue.append(state)
                visited.add(state)
                path[state] = path[(jug1, jug2)] + [(jug1, jug2)]

    return None

def print_solution(solution):
    if solution:
        for step in solution:
            print(f"Jug1: {step[0]}, Jug2: {step[1]}")
    else:
        print("No solution found.")

if __name__ == "__main__":
    jug1_capacity = 4
    jug2_capacity = 3
    target = 2

    solution = water_jug_solver(jug1_capacity, jug2_capacity, target)
    print_solution(solution)

