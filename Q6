from collections import deque

def bfs_vacuum_cleaner(grid, start):
    rows, cols = len(grid), len(grid[0])
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # Up, Down, Left, Right
    queue = deque([start])
    visited = set([start])
    
    while queue:
        x, y = queue.popleft()
        
        if grid[x][y] == 1:  # Clean the dirty cell
            grid[x][y] = 0
        
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < rows and 0 <= ny < cols and (nx, ny) not in visited and grid[nx][ny] != -1:
                queue.append((nx, ny))
                visited.add((nx, ny))
    
    return grid

def dfs_vacuum_cleaner(grid, start):
    rows, cols = len(grid), len(grid[0])
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # Up, Down, Left, Right
    stack = [start]
    visited = set([start])
    
    while stack:
        x, y = stack.pop()
        
        if grid[x][y] == 1:  # Clean the dirty cell
            grid[x][y] = 0
        
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < rows and 0 <= ny < cols and (nx, ny) not in visited and grid[nx][ny] != -1:
                stack.append((nx, ny))
                visited.add((nx, ny))
    
    return grid

# Example usage
grid = [
    [0, 1, 0],
    [0, -1, 1],
    [1, 0, 1]
]
start_position = (0, 0)

print("Initial Grid:")
for row in grid:
    print(row)

# Using BFS
bfs_cleaned_grid = bfs_vacuum_cleaner([row[:] for row in grid], start_position)
print("\nCleaned Grid using BFS:")
for row in bfs_cleaned_grid:
    print(row)

# Using DFS
dfs_cleaned_grid = dfs_vacuum_cleaner([row[:] for row in grid], start_position)
print("\nCleaned Grid using DFS:")
for row in dfs_cleaned_grid:
    print(row)
