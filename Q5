from collections import deque

class State:
    def __init__(self, missionaries, cannibals, boat):
        self.missionaries = missionaries
        self.cannibals = cannibals
        self.boat = boat

    def __eq__(self, other):
        return self.missionaries == other.missionaries and self.cannibals == other.cannibals and self.boat == other.boat

    def __hash__(self):
        return hash((self.missionaries, self.cannibals, self.boat))

    def __str__(self):
        return f"M: {self.missionaries}, C: {self.cannibals}, B: {'Right' if self.boat == 1 else 'Left'}"

def is_valid(state):
    if state.missionaries < 0 or state.missionaries > 3 or state.cannibals < 0 or state.cannibals > 3:
        return False
    if state.missionaries > 0 and state.missionaries < state.cannibals:
        return False
    if state.missionaries < 3 and (3 - state.missionaries) < (3 - state.cannibals):
        return False
    return True

def get_next_states(current_state):
    next_states = []
    directions = [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]
    for direction in directions:
        if current_state.boat == 1:
            new_state = State(current_state.missionaries - direction[0], current_state.cannibals - direction[1], 0)
        else:
            new_state = State(current_state.missionaries + direction[0], current_state.cannibals + direction[1], 1)
        if is_valid(new_state):
            next_states.append(new_state)
    return next_states

def solve_missionaries_and_cannibals():
    initial_state = State(3, 3, 1)
    goal_state = State(0, 0, 0)
    visited = set()
    queue = deque([(initial_state, [])])

    while queue:
        current_state, path = queue.popleft()
        if current_state == goal_state:
            return path + [current_state]
        if current_state not in visited:
            visited.add(current_state)
            for next_state in get_next_states(current_state):
                queue.append((next_state, path + [current_state]))

    return None

def print_solution(solution):
    if solution:
        print("Solution found:")
        for i, state in enumerate(solution):
            print(f"Step {i}: {state}")
    else:
        print("No solution found.")

if __name__ == "__main__":
    solution = solve_missionaries_and_cannibals()
    print_solution(solution)
